
Evaluation for homework 04: SoccerSim

Ball, Timer/Clock, and SoccerSim programs
Includes running Timer/Clock main to observe tests
Includes running automated SoccerSim tests
   View SoccerSimTests.bat to see test parameters used
   Evaluation results are at the bottom of this file
======================================================

The Ball.java class must exist.  There needs to be a constructor that
takes at least four arguments for the x, y, dx, and dy values.  There
must be some sort of "move()" method.  There may be some sort of
"updateSpeed()" method but the computation may be done in move() with
no penalty.  There must be a "toString()" method to display the info
about the ball's location and speed.  There should be an "outOfBounds()"
method, but the computation may be done in the SoccerSim class instead.

The Timer.java or Clock.java class is optional.  If it exists, there is
one point each for the methods listed and any tests included.  Otherwise
this is a freebie, but the functionality of the computations MUST show
up in the SoccerSim.java class file somewhere/somehow.

The SoccerSim.java class must exist.  There needs to be a constructor
that initializes the simulation.  If the initialization is done in some
other method, that is OK, and credit is given for the constructor.  There
must be some method of validating arguments.  This may be done using the
provided method "validateArgs()" or can be done in the main() method if
that is desired.  There must be some kind of report facility, which can
be either a method "report()" [or similar name], or can be done directly
in the simulation loop in another way.  There needs to be a facility to
detect collisions, which may be either a method like "collisionCheck()"
or can be done directly in the simulation loop.  There must be a main()
method which takes in and handles the argument checking, either directly
or through a method call to something like "validateArgs()".  There are
four points total [1 point for each] awarded for argument checking, which
covers:

   - right number of arguments
   - arguments are of correct type after conversion (no letters)
   - time slice set to default if not on command line
   - time slice validated and set properly if it IS on the command line

Testing includes trials that should show ball[s] come to rest, should
show two balls colliding, and three others to show the balls all go off
the field, all come to a stop, and various ball counts are handled in
the output; the last three are worth a total of three points.

There must be at least two files in the repo: the Ball.java and the
SoccerSim.java files.  If there is a Timer/Clock.java file it is
ignored for credit since it was optional, AS LONG AS THE FUNCTIONALITY
IS AVAILABLE in one of the other two classes.

A total of one point each for the following, except where noted:

class Ball              : exists and compiles no errors     - 0.5 point
constructor             : exists, takes arguments           - 1 point
getSpeed()              : optional, freebie point           - 1 point
getPosition()           : optional, freebie point           - 1 point
updateSpeed()           : may be done in move()             - 1 point
updatePosition/move()   : exists, works correctly           - 1 point
isOutOfBounds()         : may be done in SoccerSim          - 1 point
toString()              : exists, works correctly           - 1 point
main(tests)             : one point if there are any done   - 1 point
                          zero points if there are none
                          1/2 point if they don't work properly

class Timer/Clock       : optional, freebie point           - [1 point]
constructor             : optional, freebie point           - [1 point]
tick                    : exists, may be done in SoccerSim  - 1 point
toString                : exists, may be done in SoccerSim  - 1 point
main(tests)             : optional, freebie point           - [1 point]

class SoccerSim         : exists and compiles no errors     - 0.5 point
constructor             : exists, sets up simulation        - 1 point
validateArgs            : exists, may be done in main()     - 1 point
report                  : exists, may be done in main()     - 1 point
collision detect        : exists, may be done in main()     - 0.5 point
main                    : exists runs simulation            - 1 point
param checks (4)        : checks count, type, tick value    - 4 points
test comes to rest      : works per test batch file         - 1 point
test collision          : works per test batch file         - 1 point
remaining tests (3)     : works per test batch file         - 1.5 points

Files in Git (2)        : Ball.java and SoccerSim.java      - 2 points
Coding Style (5)        : indentation, naming, comments     - 5 points


Total 36 points possible:

YOUR SCORE:  33 out of 37 = 89.19% which is a B-plus

Detailed omments:
=================
Joey, be sure to name your source code files appropriately.  It occurs to me
that perhaps you are running on a Windows computer and that you have the file
extensions turned of for "known file types" so that you don't see them; and
that perhaps this is confusing you about the file names here.  If this is the
case, let me know and I'll work with you to fix that.  I've made that point
in class many times, that the file names should have ".java" extents, so you
only earn 1/2 credit for those entries.

You are asking the user if they want to use a pole or not.  While there is
nothing inherently "wrong" about that approach, it doesn't match with what
was specifice, namely, that you could randomly make a pole anywhere, OR that
you could set a specific location.  The way you have it causes the automated
tests to stop in the middle and since the output is re-directed to a file, I
don't see any prompt.

You don't validate any of the arguments.  If I run your program with zero,
one, two, or three arguments, I get an exception.  This was also specified
in the problem statement.

Your tests in the Ball class work nicely!  The "expected/actual" approach is
a great way to go here ~ good work!

You simply throw an IllegalArgumentException instead of catching that and
displaying a usage message to the user.  Although the exception does have a
message, it is harder for the user to find that in the output than if you
show a proper message.  This was also discussed in class.

Your collision detection seems off.  For balls starting at 10 10 1 1 and at
20 20 -1 -1 you should collide at about 5 seconds and at locations of
ball 1: <14.901, 14.901> and ball 2: <15.099, 15.099> so that the two center
points are within 8.9 inches of each other.  Your collision test is at
ball 1: (11.99,11.99) and ball 2: (18.01,18.01) which is too far apart.  You
earned 1/2 point on that.

Finally, I can't run the last three tests with multiple balls on the field.
Your program throws the IllegalArgumentException every time.  Not sure what
the deal is with that.  You earned 1/2 credit for them.

Your code is really nice-looking, Joey, and you seem to have a good grasp of
most of the concepts.  I feel certain that you can do a great job on all the
remaining projects this semester!  Let me know if you want to meet for office
hours or if you don't understand something.  I'm always open to chatting with
you, or if you prefer, there are several excellent TA's in Discord that can
also help you if you are stuck.
